----------------------
Command Line Arguments
----------------------

Example:  

$ make build
$ make cli // start command line interface

or 

javac Main.java Db.java TransactionManager.java
java Main   // for command line input
java Main < locationoffile.txt  // for file input

--------------------------
Sample Run with Test Input
--------------------------

n2-49-89:SimpleDatabse ryanefendy$ make
javac Main.java Db.java TransactionManager.java
n2-49-89:SimpleDatabse ryanefendy$ java Main < test_input/test1.txt
10
NULL

n2-49-89:SimpleDatabse ryanefendy$ java Main < test_input/test2.txt
2
0
1

n2-49-89:SimpleDatabse ryanefendy$ java Main < test_input/test3.txt
10
20
10
NULL

n2-49-89:SimpleDatabse ryanefendy$ java Main < test_input/test4.txt
40
No Transaction
No Transaction

n2-49-89:SimpleDatabse ryanefendy$ java Main < test_input/test5.txt
50
NULL
60
60

n2-49-89:SimpleDatabse ryanefendy$ java Main < test_input/test6.txt
1
0
1

----------------------
Implementation Details
----------------------

In order to meet the performance requirement of O(log N) or better, I started with a Hashmap, which has O(1) on average for most of the functions that needed to be implemented. One of the thing I stumbled with was although for most of the operations, HashMap will give me a O(1) complexity, on average it may lead to a O(N) complexity for determining the number of times a value appears on the database. To resolve this issue I had to make a time-space tradeoff by increasing the space for storing the data, then I was able to reduce the time needed for processing the data. I went ahead and used 2 HashMaps which will give me constant insertion and lookups for all the operations, including looking the number of times a value appears on the database.

HashMap, the operations GET, SET, UNSET and NUMEQUALTO have a runtime of O(1).

For other operations BEGIN, ROLLBACK, COMMIT, I used a Stack Data Structure, to keep track of different transactions. BEGIN would create a new transaction and push it to the top of the stack. ROLLBACK check if there's at least one transacton in the Stack if there is pop the transaction on the top of the Stack. For COMMIT, I emptied the Stack or just override the old Stack with a new empty Stack, since the changes have already been applied.

BEGIN is O(1) since is pjust ushing a new transaction to the top of the Stack. ROLLBACK O(k), where k is the number of transactions, rolling back each transactions in the Stack. Same with COMMIT.

---------------------
Performance Analysis
---------------------
BEGIN - O(1)
GET - O(1)
SET - O(1)
UNSET - O(1)
NUMEQUALTO - O(1)
COMMIT - O(k)
ROLLBACK - O(k)

* where k is the number of transactions

----------------------------------
What Would I Have Done Differently
----------------------------------

Given the time constrains of 120 minutes, if I had more time I would have opt to use the Command design pattern. This will ensure that the Client and Evoker are independent of one another, separation of concerns (SoC). That the Client and Invoker doesn't have to know anything about each other and vice versa. More importantly, this pattern will help in extensibility as in the future if I were to add more commands or features, I can do it without changing the existing code.